% dyn_compiled: help/1:
help(commands) :- 
        nl,
        write('HERE IS THE CURRENT COMMAND SET: '),
        nl,
        write('help(top) = shows top level help modes'),
        nl,
        write('total_nodes = show the total count of nodes instantiated'),
        nl,
        write('show_abduction(X) = show abduction to Analogies ... try before and after analogizing'),
        nl,
        write('show_long_term_memory = long term mem ... '),
        nl,
        write('show_total = display all the nodes instantiated'),
        nl,
        write('unique_nodes = show the total count of unique nodes'),
        nl,
        write('show_unique = display the total list of unique nodes'),
        nl,
        write('show_stargraph(NODE) = show the cloud of concepts at a node / URI'),
        nl,
        write('show_lower_stargraph(NODE, Value) = get all nodes < Value'),
        nl,
        write('show_upper_stargraph(NODE, Value) = get all nodes > Value'),
        nl,
        write('memo = show current memory by saving to MEM#.LOG'),
        nl,
        write('show_links =   show all standard builtin links (after load of mcgs)'),
        nl,
        write('show_dynamic_links = after load_testprc, dynamic process linkages in mem.'),
        nl,
        write('learn(cat, car) =  burns the cross-domain channels into long term memory'),
        nl,
        write('show_cross_links = after learning, new cross domain links in mem.'),
        nl,
        write('show_sematon(cat).	 show the complete Sematon - SECONDNESS '),
        nl,
        write('show_inports(cat).	 show inputs '),
        nl,
        write('show_outports(cat).	 show outputs '),
        nl,
        write('show_long_term_memory.	 show longterm '),
        nl,
        write('show_events(Story).	 show the sequential list of events defining the story'),
        nl,
        write('show_types(Sematon).	 show all ontological types - FIRSTNESS'),
        nl,
        write('show_channel_type(TYPES). TYPES = event, agent, is_a_kind_of... etc... '),
        nl,
        write('show_all_channels(LIST).	 lists all the types known to the system '),
        nl,
        write('show_all_deamons.	 particularly useful to show penguin / bird behaviours  '),
        nl,
        write('process_types(Sematon, Relation, Referents). check the types of the concept (process view)'),
        nl,
        write('inherit_concepts(Sematon, Relation, Referents). choose a Sematon - inheritance by typed relation and its referents'),
        nl,
        write('clear_sematons.	 clear all sematons from memory.'),
        nl,
        write('clear_processes.		 clear all processes'),
        nl,
        write('clear_processes(Sematon).	 clear attached processes only'),
        nl,
        write('clear_activation.	 activation levels wiped'),
        nl,
        write('clear_pragmatic.		 pragmatics cleared'),
        nl,
        write('kill_weak_links.		 kill weak links where the strength is too low'),
        nl,
        write('set_evidence_search_horizon(Distance).	 horizon of spreading computations'),
        nl,
        write('set_amplitude_horizon(X). set amplitude attenuation'),
        nl,
        write('set_learn_mode(Mode).	 on or off for the conceptual link net'),
        nl,
        write('analogy(cat).		 try to find a best match'),
        nl,
        write('show_conflict_graph.	 display the conflicts graphs'),
        nl,
        write('event(Concept).		 is concept a type of event?'),
        nl,
        write('prog_interpret(SourceConcept, CarrierConcept). progressive interpretation'),
        nl,
        write('interpret(car, cat).		 no transform_link'),
        nl,
        write('find_secondness(car, cat).	 with transform_link'),
        nl,
        write('find_secondness_best(car, cat).	 with transform_link'),
        nl,
        write('show_processes(PROPERTY, ENTITY) --- example: show_processes(flight, penguin).'),
        nl,
        write('find_secondness_minimum(car, cat). with transform_link'),
        nl.

