package prolog.core;
import prolog.kernel.*;
import prolog.logic.*;

/**
 * An Hub is a device which synchronizes
 * Producers and Consumers. Called through Reflection from Prolog.
 */
public class Hub implements Stateful {
  public Hub(long t) {
    this.port=null;
    this.timeout=(0==t)?t:t+System.currentTimeMillis() ;
  }
  
  private Object port;
  private long timeout;
  
  public synchronized Object collect() {    
    while(null==port) {
      try {
        if(0==timeout) wait();
        else {
          long t=timeout-System.currentTimeMillis();
          if(t<0) break;
          wait(t);
        }
      }
      catch(InterruptedException e) {
      }
    }
    //IO.mes("get port:"+timeout+port);
    Object result=(null!=port)?port:null;
    port=null;
    notifyAll();
    return result;
  }
  
  public synchronized int putElement(Object T) {
    while(null!=port) {
      try {
        if(0==timeout) wait();
        else {
          long t=timeout-System.currentTimeMillis();
          if(t<0) break;
          wait(t);
        }
      }
      catch(InterruptedException e) {
      }
    }
    port=(null==port)?T:null;
    //IO.mes("put port:"+port);
    notifyAll();
    return 1;
  }
  
  synchronized public void stop() {
    timeout=-1L;
  }

}
