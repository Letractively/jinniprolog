/* do this first to validate everything is ok */

vivo_test:-
  broker:start,
  WinName='VivoWindow',
  Goal='and(println(hello),sleep(10))',
  new(vivo_agent(WinName,Goal,vivo_tester),_A),
  rli_call(vivo_tester,a<=99),
  rli_call(vivo_tester,a=>X),
  println(running(got(X))).

vivo_test1:-
 launch_ssoa(vivo_agent,'w1',true).
   
go:-
  broker:start,for(I,1,3),launch(I),fail;println(all_started).
  
launch(1):- % NEW
  ClassName=agent_class1,
  WinName='Event Source Window',
  AgentName=agent1,
  Goal=event_source,
  launch_ssoa(ClassName,WinName,AgentName,Goal).
launch(2):-launch_ssoa(agent2,'A Target Window',event_target).
launch(3):-launch_ssoa(agent3,'Another Target Windows',event_target).

launch_ssoa(Name,Goal):-AgentClass=Name,launch_ssoa(AgentClass,Name,Goal).

launch_ssoa(AgentClass,WinName,Goal):-launch_ssoa(AgentClass,WinName,AgentClass,Goal).

launch_ssoa(AgentClass,WinName,AgentName,Goal):-acmd(Goal,AgentClass,WinName,AgentName). % NEW
%launch_ssoa(AgentClass,WinName,AgentName,Goal):-icmd(Goal,AgentClass,WinName,AgentName).

icmd(Goal,AgentClass,WinName,AgentName):-
  AgentConstructor=..[AgentClass,WinName,Goal,AgentName],
  new(AgentConstructor,A),
  A:println(starting_agent(AgentClass,in(WinName))).

acmd(Goal,AgentClass,WinName,AgentName):-
  acmd(Goal,AgentClass,WinName,AgentName,Cmd),
  bg(vivo_process(Cmd)).

acmd(Goal,AgentClass,WinName,Cmd)-acmd(Goal,AgentClass,WinName,AgentClass,Cmd).

acmd(Goal,AgentClass,WinName,AgentName,Cmd):-
  AgentConstructor=..[AgentClass,WinName,Goal,AgentName],
  and(new(AgentConstructor,T),T:vivo_wait)=Cmd.

vivo_process(Arg):-external_vivo_process(java,Arg). % use this for debugging
%vivo_process(Arg):-external_vivo_process(javaw,Arg). % use this for deployment

external_vivo_process(Java,Arg):-
   to_string(Arg,SArg),
   make_cmd([
   'cmd /c start ',
   Java,' ',
   '-Djava.rmi.server.codebase=file:/bin/prolog.jar -Xmx512M ',
   '-classpath ".;/bin/prolog.jar;/bin/prolog2d.jar;/bin/prolog3d.jar" ',
   'prolog.kernel.Main "/bin/prolog.jar" "',
   SArg,'"'],
   Cmd),
   println(cmd=Cmd),
   system(Cmd).

stop_all:-
  foreach(
    member(A,[agent1,agent2,agent3]),
    stop_ssoa(A)
  ),
  rli_call(broker,agent_stop),
  halt.
  
stop_ssoa(Name):-rli_call(Name,vivo_stop).
